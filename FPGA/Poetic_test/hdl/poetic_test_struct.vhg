--
-- VHDL Architecture Poetic_test.poetic_test.struct
--
-- Created:
--          by - jeann.UNKNOWN (DESKTOP-V46KISN)
--          at - 14:11:36 21.06.2021
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.ALL;

LIBRARY Poetic;
LIBRARY Poetic_test;
LIBRARY SPI;

ARCHITECTURE struct OF poetic_test IS

    -- Architecture declarations
    constant signalBitNb: positive := 16;
    constant adcBitNb: integer := 12;
    constant dataBitNb: positive := 16;
    constant phaseBitNb: positive := 16;

    -- Internal signal declarations
    SIGNAL CS_n       : std_ulogic;
    SIGNAL Data       : std_ulogic_vector(adcBitNb-1 DOWNTO 0);
    SIGNAL MISO       : std_ulogic;
    SIGNAL MOSI       : std_ulogic;
    SIGNAL SDO        : std_ulogic;
    SIGNAL clock      : std_ulogic;
    SIGNAL clockOut   : std_ulogic;
    SIGNAL dacSel     : std_ulogic_vector(1 DOWNTO 0);
    SIGNAL data1      : std_ulogic_vector(adcBitNb-1 DOWNTO 0);
    SIGNAL enable     : std_ulogic;
    SIGNAL masterData : std_ulogic_vector(dataBitNb-1 DOWNTO 0);
    SIGNAL masterFull : std_ulogic;
    SIGNAL masterWr   : std_ulogic;
    SIGNAL mode       : std_ulogic_vector(1 DOWNTO 0);
    SIGNAL phaseIn    : unsigned(phaseBitNb-1 DOWNTO 0);
    SIGNAL reset      : std_ulogic;
    SIGNAL send       : std_ulogic;
    SIGNAL slaveRd    : std_ulogic;
    SIGNAL trigger    : std_ulogic;


    -- Component Declarations
    COMPONENT ADC
    GENERIC (
        adcBitNb : integer := 12
    );
    PORT (
        SCLK    : IN     std_ulogic ;
        SDO     : IN     std_ulogic ;
        clock   : IN     std_ulogic ;
        reset   : IN     std_ulogic ;
        trigger : IN     std_ulogic ;
        CS_n    : OUT    std_ulogic ;
        Data    : OUT    std_ulogic_vector (adcBitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT DAC
    GENERIC (
        adcBitNb  : positive := 12;
        dataBitNb : positive := 12
    );
    PORT (
        clock      : IN     std_ulogic ;
        dacSel     : IN     std_ulogic_vector (1 DOWNTO 0);
        data       : IN     std_ulogic_vector (adcBitNb-1 DOWNTO 0);
        masterFull : IN     std_ulogic ;
        mode       : IN     std_ulogic_vector (1 DOWNTO 0);
        reset      : IN     std_ulogic ;
        send       : IN     std_ulogic ;
        masterData : OUT    std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        masterWr   : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT clockGenerator
    GENERIC (
        counterBitNb : integer := 12;
        countValue   : integer := 250
    );
    PORT (
        clock    : IN     std_ulogic ;
        enable   : IN     std_ulogic ;
        reset    : IN     std_ulogic ;
        clockOut : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT threephase
    GENERIC (
        phaseBitNb : positive := 16
    );
    PORT (
        clock   : IN     std_ulogic ;
        phaseIn : IN     unsigned (phaseBitNb-1 DOWNTO 0);
        reset   : IN     std_ulogic ;
        phase1  : OUT    unsigned (phaseBitNb-1 DOWNTO 0);
        phase2  : OUT    unsigned (phaseBitNb-1 DOWNTO 0);
        phase3  : OUT    unsigned (phaseBitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT poetic_tester
    GENERIC (
        adcBitNb   : integer  := 12;
        phaseBitNb : positive := 16
    );
    PORT (
        CS_n     : IN     std_ulogic ;
        Data     : IN     std_ulogic_vector (adcBitNb-1 DOWNTO 0);
        MOSI     : IN     std_ulogic ;
        clockOut : IN     std_ulogic ;
        MISO     : OUT    std_ulogic ;
        SDO      : OUT    std_ulogic ;
        clock    : OUT    std_ulogic ;
        dacSel   : OUT    std_ulogic_vector (1 DOWNTO 0);
        data1    : OUT    std_ulogic_vector (adcBitNb-1 DOWNTO 0);
        enable   : OUT    std_ulogic ;
        mode     : OUT    std_ulogic_vector (1 DOWNTO 0);
        phaseIn  : OUT    unsigned (phaseBitNb-1 DOWNTO 0);
        reset    : OUT    std_ulogic ;
        send     : OUT    std_ulogic ;
        slaveRd  : OUT    std_ulogic ;
        trigger  : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT spiFifo_master
    GENERIC (
        dataBitNb      : positive   := 8;
        fifoDepth      : positive   := 8;
        clockFrequency : real       := 20.0E6;
        spiFrequency   : real       := 2.0E6;
        cPol           : std_ulogic := '0';
        cPha           : std_ulogic := '0'
    );
    PORT (
        slaveRd    : IN     std_ulogic ;
        slaveData  : OUT    std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        clock      : IN     std_ulogic ;
        MISO       : IN     std_ulogic ;
        reset      : IN     std_ulogic ;
        MOSI       : OUT    std_ulogic ;
        slaveEmpty : OUT    std_ulogic ;
        masterFull : OUT    std_ulogic ;
        masterData : IN     std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        masterWr   : IN     std_ulogic ;
        sClk       : OUT    std_ulogic ;
        SS_n       : OUT    std_ulogic 
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
    FOR ALL : ADC USE ENTITY Poetic.ADC;
    FOR ALL : DAC USE ENTITY Poetic.DAC;
    FOR ALL : clockGenerator USE ENTITY Poetic.clockGenerator;
    FOR ALL : poetic_tester USE ENTITY Poetic_test.poetic_tester;
    FOR ALL : spiFifo_master USE ENTITY SPI.spiFifo_master;
    FOR ALL : threephase USE ENTITY Poetic.threephase;
    -- pragma synthesis_on


BEGIN

    -- Instance port mappings.
    I1 : ADC
        GENERIC MAP (
            adcBitNb => 12
        )
        PORT MAP (
            SCLK    => clockOut,
            SDO     => SDO,
            clock   => clock,
            reset   => reset,
            trigger => trigger,
            CS_n    => CS_n,
            Data    => Data
        );
    I2 : DAC
        GENERIC MAP (
            adcBitNb  => adcBitNb,
            dataBitNb => 16
        )
        PORT MAP (
            clock      => clock,
            dacSel     => dacSel,
            data       => data1,
            masterFull => masterFull,
            mode       => mode,
            reset      => reset,
            send       => send,
            masterData => masterData,
            masterWr   => masterWr
        );
    I0 : clockGenerator
        GENERIC MAP (
            counterBitNb => 12,
            countValue   => 4
        )
        PORT MAP (
            clock    => clock,
            enable   => enable,
            reset    => reset,
            clockOut => clockOut
        );
    I4 : threephase
        GENERIC MAP (
            phaseBitNb => 16
        )
        PORT MAP (
            clock   => clock,
            phaseIn => phaseIn,
            reset   => reset,
            phase1  => OPEN,
            phase2  => OPEN,
            phase3  => OPEN
        );
    I_tester : poetic_tester
        GENERIC MAP (
            adcBitNb => 12
        )
        PORT MAP (
            CS_n     => CS_n,
            Data     => Data,
            MOSI     => MOSI,
            clockOut => clockOut,
            MISO     => MISO,
            SDO      => SDO,
            clock    => clock,
            dacSel   => dacSel,
            data1    => data1,
            enable   => enable,
            mode     => mode,
            phaseIn  => phaseIn,
            reset    => reset,
            send     => send,
            slaveRd  => slaveRd,
            trigger  => trigger
        );
    I3 : spiFifo_master
        GENERIC MAP (
            dataBitNb      => dataBitNb,
            fifoDepth      => 1,
            clockFrequency => 20.0E6,
            spiFrequency   => 2.0E6,
            cPol           => '0',
            cPha           => '0'
        )
        PORT MAP (
            slaveRd    => slaveRd,
            slaveData  => OPEN,
            clock      => clock,
            MISO       => MISO,
            reset      => reset,
            MOSI       => MOSI,
            slaveEmpty => OPEN,
            masterFull => masterFull,
            masterData => masterData,
            masterWr   => masterWr,
            sClk       => OPEN,
            SS_n       => OPEN
        );

END struct;
