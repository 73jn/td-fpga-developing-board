-- VHDL Entity Lissajous_test.lissajousGenerator_test.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:07:27 02/19/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--


ENTITY lissajousGenerator_test IS
-- Declarations

END lissajousGenerator_test ;





-- VHDL Entity Lissajous.lissajousGenerator.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:07:53 02/19/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY lissajousGenerator IS
    GENERIC( 
        signalBitNb : positive := 16;
        phaseBitNb  : positive := 16;
        stepX       : positive := 1;
        stepY       : positive := 1
    );
    PORT( 
        clock      : IN     std_ulogic;
        reset      : IN     std_ulogic;
        triggerOut : OUT    std_ulogic;
        xOut       : OUT    std_ulogic;
        yOut       : OUT    std_ulogic
    );

-- Declarations

END lissajousGenerator ;





-- VHDL Entity DigitalToAnalogConverter.DAC.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:06:08 02/19/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY DAC IS
    GENERIC( 
        signalBitNb : positive := 16
    );
    PORT( 
        serialOut  : OUT    std_ulogic;
        parallelIn : IN     unsigned (signalBitNb-1 DOWNTO 0);
        clock      : IN     std_ulogic;
        reset      : IN     std_ulogic
    );

-- Declarations

END DAC ;





ARCHITECTURE studentVersion OF DAC IS
  signal acc : unsigned(parallelIn'high + 4 downto 0);
  signal msb : std_ulogic;
  constant toSub :unsigned(parallelIn'range) := (others => '1');
  constant offset :unsigned(parallelIn'range) := toSub / 4;
BEGIN
  serialOut <= msb;
  msb <= acc(acc'high);
  pro: process(reset, clock)
  begin
    if reset = '1' then
      acc<=(others=>'0');
    elsif rising_edge(clock) then
	  if msb = '1' then
        acc <= acc + shift_right(parallelIn,1) - 2**parallelIn'length + offset;
	  else
	    acc <= acc + shift_right(parallelIn,1) + offset;
	  end if;
    end if;
  end process pro;
END ARCHITECTURE studentVersion;



-- VHDL Entity SplineInterpolator.sineGen.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:00:40 02/19/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY sineGen IS
    GENERIC( 
        signalBitNb : positive := 16;
        phaseBitNb  : positive := 10
    );
    PORT( 
        clock    : IN     std_ulogic;
        reset    : IN     std_ulogic;
        step     : IN     unsigned (phaseBitNb-1 DOWNTO 0);
        sawtooth : OUT    unsigned (signalBitNb-1 DOWNTO 0);
        sine     : OUT    unsigned (signalBitNb-1 DOWNTO 0);
        square   : OUT    unsigned (signalBitNb-1 DOWNTO 0);
        triangle : OUT    unsigned (signalBitNb-1 DOWNTO 0)
    );

-- Declarations

END sineGen ;





-- VHDL Entity SplineInterpolator.interpolatorCoefficients.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:00:20 02/19/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY interpolatorCoefficients IS
    GENERIC( 
        bitNb      : positive := 16;
        coeffBitNb : positive := 16
    );
    PORT( 
        sample1           : IN     signed (bitNb-1 DOWNTO 0);
        sample2           : IN     signed (bitNb-1 DOWNTO 0);
        sample3           : IN     signed (bitNb-1 DOWNTO 0);
        sample4           : IN     signed (bitNb-1 DOWNTO 0);
        a                 : OUT    signed (coeffBitNb-1 DOWNTO 0);
        b                 : OUT    signed (coeffBitNb-1 DOWNTO 0);
        c                 : OUT    signed (coeffBitNb-1 DOWNTO 0);
        d                 : OUT    signed (coeffBitNb-1 DOWNTO 0);
        interpolateLinear : IN     std_ulogic
    );

-- Declarations

END interpolatorCoefficients ;





ARCHITECTURE studentVersion OF interpolatorCoefficients IS
BEGIN
  coeffmap : process(sample1, sample2, sample3, sample4)
  begin
    a <= resize(-sample1,a'length)+resize(3*sample2,a'length)-resize(3*sample3,a'length)+resize(sample4,a'length);
    b <= resize(2*sample1,b'length)-resize(5*sample2,b'length)+resize(4*sample3,b'length)-resize(sample4,b'length);
    c <= resize(-sample1,c'length)+resize(sample3,c'length);
    d <= resize((sample2), d'length);
  end process coeffmap;
END ARCHITECTURE studentVersion;




-- VHDL Entity WaveformGenerator.sawtoothGen.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 08:02:49 03/11/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY sawtoothGen IS
    GENERIC( 
        bitNb : positive := 16
    );
    PORT( 
        sawtooth : OUT    unsigned (bitNb-1 DOWNTO 0);
        clock    : IN     std_ulogic;
        reset    : IN     std_ulogic;
        step     : IN     unsigned (bitNb-1 DOWNTO 0);
        en       : IN     std_ulogic
    );

-- Declarations

END sawtoothGen ;





ARCHITECTURE studentVersion OF sawtoothGen IS
  signal counter_int : unsigned(sawtooth'range);
BEGIN
  count: process(reset, clock)
  begin
  if reset = '1' then
    counter_int <= (others => '0');
  elsif rising_edge(clock) then
    if en = '1' then
    counter_int <= counter_int + step;
    end if;
  end if;
  end process count;
  sawtooth <= counter_int;
END ARCHITECTURE studentVersion;



-- VHDL Entity SplineInterpolator.interpolatorShiftRegister.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:00:24 02/19/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY interpolatorShiftRegister IS
    GENERIC( 
        signalBitNb : positive := 16
    );
    PORT( 
        clock        : IN     std_ulogic;
        reset        : IN     std_ulogic;
        shiftSamples : IN     std_ulogic;
        sampleIn     : IN     signed (signalBitNb-1 DOWNTO 0);
        sample1      : OUT    signed (signalBitNb-1 DOWNTO 0);
        sample2      : OUT    signed (signalBitNb-1 DOWNTO 0);
        sample3      : OUT    signed (signalBitNb-1 DOWNTO 0);
        sample4      : OUT    signed (signalBitNb-1 DOWNTO 0)
    );

-- Declarations

END interpolatorShiftRegister ;





ARCHITECTURE studentVersion OF interpolatorShiftRegister IS
  type arrayType is array (1 to 4) of signed(sampleIn'range);
  signal tab : arrayType;
BEGIN
  shift: process(reset, clock)
  begin
  if reset = '1' then
	tab(1) <= (others => '0');
	tab(2) <= (others => '0');
	tab(3) <= (others => '0');
	tab(4) <= (others => '0');
  elsif rising_edge(clock) then
    if shiftSamples = '1' then
	  for i in 1 to 3 loop
	    tab(i)<=tab(i+1);
	  end loop;
	  tab(4)<=sampleIn;
	end if;
  end if;
  end process shift;
  
  sample1<=tab(1);
  sample2<=tab(2);
  sample3<=tab(3);
  sample4<=tab(4);
END ARCHITECTURE studentVersion;




-- VHDL Entity SplineInterpolator.sineTable.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:00:46 02/19/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY sineTable IS
    GENERIC( 
        inputBitNb        : positive := 16;
        outputBitNb       : positive := 16;
        tableAddressBitNb : positive := 3
    );
    PORT( 
        sine  : OUT    signed (outputBitNb-1 DOWNTO 0);
        phase : IN     unsigned (inputBitNb-1 DOWNTO 0)
    );

-- Declarations

END sineTable ;





ARCHITECTURE studentVersion OF sineTable IS

  signal phaseTableAddress : unsigned(tableAddressBitNb-1 downto 0);
  signal temp : unsigned(tableAddressBitNb-1 downto 0);
  signal quarterSine : signed(sine'range);
  

BEGIN
  temp <= phase(phase'high-2 downto phase'high-2-tableAddressBitNb+1);
  p : process(temp,phase)
  begin
    if phase(phase'high-1) = '1' then
	  phaseTableAddress<=not(temp)+1;
	else
	  phaseTableAddress<=temp;
	end if;
  end process p;

  quarterTable: process(phaseTableAddress, phase)
  begin
    case to_integer(phaseTableAddress) is
      when 0 => 
        if phase(phase'high-1) = '1' then
          quarterSine <= to_signed(16#7FFF#, quarterSine'length);
        else
          quarterSine <= to_signed(16#0000#, quarterSine'length);
        end if;
      when 1 => quarterSine <= to_signed(16#18F9#, quarterSine'length);
      when 2 => quarterSine <= to_signed(16#30FB#, quarterSine'length);
      when 3 => quarterSine <= to_signed(16#471C#, quarterSine'length);
      when 4 => quarterSine <= to_signed(16#5A82#, quarterSine'length);
      when 5 => quarterSine <= to_signed(16#6A6D#, quarterSine'length);
      when 6 => quarterSine <= to_signed(16#7641#, quarterSine'length);
      when 7 => quarterSine <= to_signed(16#7D89#, quarterSine'length);
      when others => quarterSine <= (others => '-');
    end case;
  end process quarterTable;

  -- invert signal every demi period
  invertSignal: process(quarterSine, phase)
  begin
    if phase(phase'high) = '0' then
      sine <= quarterSine;
    else
      sine <= - quarterSine;
    end if ;
  end process invertSignal;
  
  
END ARCHITECTURE studentVersion;




-- VHDL Entity SplineInterpolator.resizer.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:00:36 02/19/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY resizer IS
    GENERIC( 
        inputBitNb  : positive := 16;
        outputBitNb : positive := 16
    );
    PORT( 
        resizeOut : OUT    unsigned (outputBitNb-1 DOWNTO 0);
        resizeIn  : IN     unsigned (inputBitNb-1 DOWNTO 0)
    );

-- Declarations

END resizer ;





ARCHITECTURE studentVersion OF resizer IS
BEGIN
  --resizeOut <= (others => '0');
  gsame : if resizeOut'length = resizeIn'length generate
    resizeOut <= resizeIn;
  end generate gsame;
  gup : if resizeOut'length > resizeIn'length generate
    resizeOut <= shift_left(resize(resizeIn,resizeOut'length),
	  resizeOut'length-resizeIn'length);
  end generate gup;
  gdown : if resizeOut'length < resizeIn'length generate
    resizeOut <= resize(shift_right(resizeIn,resizeIn'length-resizeOut'length),
	   resizeOut'length);
  end generate gdown;
END ARCHITECTURE studentVersion;




-- VHDL Entity SplineInterpolator.interpolatorCalculatePolynom.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:00:14 02/19/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY interpolatorCalculatePolynom IS
    GENERIC( 
        signalBitNb       : positive := 16;
        coeffBitNb        : positive := 16;
        oversamplingBitNb : positive := 8
    );
    PORT( 
        clock          : IN     std_ulogic;
        reset          : IN     std_ulogic;
        restartPolynom : IN     std_ulogic;
        d              : IN     signed (coeffBitNb-1 DOWNTO 0);
        sampleOut      : OUT    signed (signalBitNb-1 DOWNTO 0);
        c              : IN     signed (coeffBitNb-1 DOWNTO 0);
        b              : IN     signed (coeffBitNb-1 DOWNTO 0);
        a              : IN     signed (coeffBitNb-1 DOWNTO 0);
        en             : IN     std_ulogic
    );

-- Declarations

END interpolatorCalculatePolynom ;





ARCHITECTURE studentVersion OF interpolatorCalculatePolynom IS
  signal x : signed(a'high + 1+3*oversamplingBitNb + 8 downto 0);
  signal u : signed(a'high + 1+3*oversamplingBitNb + 8 downto 0);
  signal v : signed(a'high + 1+3*oversamplingBitNb + 8 downto 0);
  signal y : signed(a'high + 1+3*oversamplingBitNb + 8 downto 0);
  signal w : signed(a'high + 1+3*oversamplingBitNb + 8 downto 0);
  
  signal a_resize : signed(x'range);
  signal b_resize : signed(x'range);
  signal c_resize : signed(x'range);
  signal d_resize : signed(x'range);
BEGIN
  a_resize <= resize(a,x'length);
  b_resize <= resize(b,x'length);
  c_resize <= resize(c,x'length);
  d_resize <= resize(d,x'length);
  pro: process(reset, clock)
  begin
  if reset = '1' then
    x <= (others => '0');
	u <= (others => '0');
	v <= (others => '0');
	y <= (others => '0');
	w <= (others => '0');
  elsif rising_edge(clock) then
    if en = '1' then
      if restartPolynom = '1' then
	    -- x= d*2*2^(3*m)
	    x <= shift_left(d_resize,1+3*oversamplingBitNb);
	    -- u = a + b*2^(m)+c*2^(2*m)
	    u <= resize(a,x'length) 
	         + shift_left(b_resize,oversamplingBitNb) 
	         + shift_left(c_resize,2*oversamplingBitNb);
        -- v = 6*a+2*b*2^(m)
	    v <= shift_left(a_resize+a_resize+a_resize,1)
	         + shift_left(b_resize,1+oversamplingBitNb);
	    -- w = 6*a   
	    w <= shift_left(a_resize+a_resize+a_resize,1);
	    -- y = d
	    y <= d_resize;
      else
	    x <= x+u;
	    u <= u+v;
	    v <= v+w;
	    y <= shift_right(x, 1+3*oversamplingBitNb);
	  end if;
	end if;
  end if;
  end process pro;
  sampleOut <= resize(y,sampleOut'length);

END ARCHITECTURE studentVersion;




-- VHDL Entity WaveformGenerator.sawtoothToSquare.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 08:02:49 03/11/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY sawtoothToSquare IS
    GENERIC( 
        bitNb : positive := 16
    );
    PORT( 
        square   : OUT    unsigned (bitNb-1 DOWNTO 0);
        sawtooth : IN     unsigned (bitNb-1 DOWNTO 0)
    );

-- Declarations

END sawtoothToSquare ;





ARCHITECTURE studentVersion OF sawtoothToSquare IS
BEGIN
  invert: process(sawtooth)
  begin
    if sawtooth(sawtooth'high) = '0' then
      square <= (others => '1');
    else
      square <= (others => '0');
    end if;
  end process invert;
END ARCHITECTURE studentVersion;



-- VHDL Entity WaveformGenerator.sawtoothToTriangle.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 08:02:49 03/11/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY sawtoothToTriangle IS
    GENERIC( 
        bitNb : positive := 16
    );
    PORT( 
        triangle : OUT    unsigned (bitNb-1 DOWNTO 0);
        sawtooth : IN     unsigned (bitNb-1 DOWNTO 0)
    );

-- Declarations

END sawtoothToTriangle ;





ARCHITECTURE studentVersion OF sawtoothToTriangle IS
 signal temp : unsigned(sawtooth'range);
BEGIN
  invert: process(sawtooth)
  begin
  if sawtooth(sawtooth'high) = '0' then
    temp <= sawtooth;
  else
    temp <= not sawtooth;
  end if;
  end process invert;
  triangle <= temp sll 1;
END ARCHITECTURE studentVersion;



-- VHDL Entity SplineInterpolator.interpolatorTrigger.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:00:28 02/19/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY interpolatorTrigger IS
    GENERIC( 
        counterBitNb : positive := 4
    );
    PORT( 
        triggerOut : OUT    std_ulogic;
        clock      : IN     std_ulogic;
        reset      : IN     std_ulogic;
        en         : IN     std_ulogic
    );

-- Declarations

END interpolatorTrigger ;





ARCHITECTURE studentVersion OF interpolatorTrigger IS
  signal counterSig : unsigned(counterBitNb downto 0);
  signal counterSigReset : std_ulogic := '0';
  signal out1 : std_ulogic := '0';
BEGIN
  --triggerOut <= '0';
  count: process(reset, clock)
  begin
  if reset = '1' then
    counterSig <= (others => '0');
  elsif rising_edge(clock) then
    if en = '1' then
	  if counterSigReset = '1' then
        counterSig <= (others => '0');
	  else
	    counterSig <= counterSig + 1;
	  end if;
    end if;
  end if;
  end process count;
  
  trig: process(counterSig)
  begin
  if counterSig(counterSig'high) = '1' then
    out1 <= '1';
	counterSigReset <= '1';
  else
    out1 <= '0';
    counterSigReset <= '0';
  end if;
  end process trig;
  
  triggerOut<=out1;

END ARCHITECTURE studentVersion;




-- VHDL Entity SplineInterpolator.offsetToUnsigned.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:00:32 02/19/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY offsetToUnsigned IS
    GENERIC( 
        bitNb : positive := 16
    );
    PORT( 
        unsignedOut : OUT    unsigned (bitNb-1 DOWNTO 0);
        signedIn    : IN     signed (bitNb-1 DOWNTO 0)
    );

-- Declarations

END offsetToUnsigned ;





ARCHITECTURE studentVersion OF offsetToUnsigned IS
  signal y : unsigned(unsignedOut'range);
  signal x : unsigned(signedIn'range);
BEGIN
  x <= unsigned(signedIn);
  pro : process (x)
  begin
    if x(x'high) = '0' then
	  y <= x + 2**(unsignedOut'high);
	else
	  y <= x - 2**(unsignedOut'high);
	end if;
  end process pro;
  unsignedOut <= y;
END ARCHITECTURE studentVersion;




--
-- VHDL Architecture SplineInterpolator.sineGen.struct
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:00:40 02/19/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

LIBRARY SplineInterpolator;
LIBRARY WaveformGenerator;

ARCHITECTURE struct OF sineGen IS

    -- Architecture declarations
    constant tableAddressBitNb : positive := 3;
    constant sampleCountBitNb : positive := phaseBitNb-2-tableAddressBitNb;
    constant coeffBitNb : positive := signalBitNb+4;

    -- Internal signal declarations
    SIGNAL a           : signed(coeffBitNb-1 DOWNTO 0);
    SIGNAL b           : signed(coeffBitNb-1 DOWNTO 0);
    SIGNAL c           : signed(coeffBitNb-1 DOWNTO 0);
    SIGNAL d           : signed(coeffBitNb-1 DOWNTO 0);
    SIGNAL logic0      : std_ulogic;
    SIGNAL logic1      : std_ulogic;
    SIGNAL newPolynom  : std_ulogic;
    SIGNAL phase       : unsigned(phaseBitNb-1 DOWNTO 0);
    SIGNAL sample1     : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL sample2     : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL sample3     : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL sample4     : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL sineSamples : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL sineSigned  : signed(signalBitNb-1 DOWNTO 0);

    -- Implicit buffer signal declarations
    SIGNAL sawtooth_internal : unsigned (signalBitNb-1 DOWNTO 0);


    -- Component Declarations
    COMPONENT interpolatorCalculatePolynom
    GENERIC (
        signalBitNb       : positive := 16;
        coeffBitNb        : positive := 16;
        oversamplingBitNb : positive := 8
    );
    PORT (
        clock          : IN     std_ulogic ;
        reset          : IN     std_ulogic ;
        restartPolynom : IN     std_ulogic ;
        d              : IN     signed (coeffBitNb-1 DOWNTO 0);
        sampleOut      : OUT    signed (signalBitNb-1 DOWNTO 0);
        c              : IN     signed (coeffBitNb-1 DOWNTO 0);
        b              : IN     signed (coeffBitNb-1 DOWNTO 0);
        a              : IN     signed (coeffBitNb-1 DOWNTO 0);
        en             : IN     std_ulogic 
    );
    END COMPONENT;
    COMPONENT interpolatorCoefficients
    GENERIC (
        bitNb      : positive := 16;
        coeffBitNb : positive := 16
    );
    PORT (
        sample1           : IN     signed (bitNb-1 DOWNTO 0);
        sample2           : IN     signed (bitNb-1 DOWNTO 0);
        sample3           : IN     signed (bitNb-1 DOWNTO 0);
        sample4           : IN     signed (bitNb-1 DOWNTO 0);
        a                 : OUT    signed (coeffBitNb-1 DOWNTO 0);
        b                 : OUT    signed (coeffBitNb-1 DOWNTO 0);
        c                 : OUT    signed (coeffBitNb-1 DOWNTO 0);
        d                 : OUT    signed (coeffBitNb-1 DOWNTO 0);
        interpolateLinear : IN     std_ulogic 
    );
    END COMPONENT;
    COMPONENT interpolatorShiftRegister
    GENERIC (
        signalBitNb : positive := 16
    );
    PORT (
        clock        : IN     std_ulogic ;
        reset        : IN     std_ulogic ;
        shiftSamples : IN     std_ulogic ;
        sampleIn     : IN     signed (signalBitNb-1 DOWNTO 0);
        sample1      : OUT    signed (signalBitNb-1 DOWNTO 0);
        sample2      : OUT    signed (signalBitNb-1 DOWNTO 0);
        sample3      : OUT    signed (signalBitNb-1 DOWNTO 0);
        sample4      : OUT    signed (signalBitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT interpolatorTrigger
    GENERIC (
        counterBitNb : positive := 4
    );
    PORT (
        triggerOut : OUT    std_ulogic ;
        clock      : IN     std_ulogic ;
        reset      : IN     std_ulogic ;
        en         : IN     std_ulogic 
    );
    END COMPONENT;
    COMPONENT offsetToUnsigned
    GENERIC (
        bitNb : positive := 16
    );
    PORT (
        unsignedOut : OUT    unsigned (bitNb-1 DOWNTO 0);
        signedIn    : IN     signed (bitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT resizer
    GENERIC (
        inputBitNb  : positive := 16;
        outputBitNb : positive := 16
    );
    PORT (
        resizeOut : OUT    unsigned (outputBitNb-1 DOWNTO 0);
        resizeIn  : IN     unsigned (inputBitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT sineTable
    GENERIC (
        inputBitNb        : positive := 16;
        outputBitNb       : positive := 16;
        tableAddressBitNb : positive := 3
    );
    PORT (
        sine  : OUT    signed (outputBitNb-1 DOWNTO 0);
        phase : IN     unsigned (inputBitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT sawtoothGen
    GENERIC (
        bitNb : positive := 16
    );
    PORT (
        sawtooth : OUT    unsigned (bitNb-1 DOWNTO 0);
        clock    : IN     std_ulogic ;
        reset    : IN     std_ulogic ;
        step     : IN     unsigned (bitNb-1 DOWNTO 0);
        en       : IN     std_ulogic 
    );
    END COMPONENT;
    COMPONENT sawtoothToSquare
    GENERIC (
        bitNb : positive := 16
    );
    PORT (
        square   : OUT    unsigned (bitNb-1 DOWNTO 0);
        sawtooth : IN     unsigned (bitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT sawtoothToTriangle
    GENERIC (
        bitNb : positive := 16
    );
    PORT (
        triangle : OUT    unsigned (bitNb-1 DOWNTO 0);
        sawtooth : IN     unsigned (bitNb-1 DOWNTO 0)
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
    FOR ALL : interpolatorCalculatePolynom USE ENTITY SplineInterpolator.interpolatorCalculatePolynom;
    FOR ALL : interpolatorCoefficients USE ENTITY SplineInterpolator.interpolatorCoefficients;
    FOR ALL : interpolatorShiftRegister USE ENTITY SplineInterpolator.interpolatorShiftRegister;
    FOR ALL : interpolatorTrigger USE ENTITY SplineInterpolator.interpolatorTrigger;
    FOR ALL : offsetToUnsigned USE ENTITY SplineInterpolator.offsetToUnsigned;
    FOR ALL : resizer USE ENTITY SplineInterpolator.resizer;
    FOR ALL : sawtoothGen USE ENTITY WaveformGenerator.sawtoothGen;
    FOR ALL : sawtoothToSquare USE ENTITY WaveformGenerator.sawtoothToSquare;
    FOR ALL : sawtoothToTriangle USE ENTITY WaveformGenerator.sawtoothToTriangle;
    FOR ALL : sineTable USE ENTITY SplineInterpolator.sineTable;
    -- pragma synthesis_on


BEGIN
    -- Architecture concurrent statements
    -- HDL Embedded Text Block 2 eb2
    logic1 <= '1';

    -- HDL Embedded Text Block 3 eb3
    logic0 <= '0';


    -- Instance port mappings.
    I_spline : interpolatorCalculatePolynom
        GENERIC MAP (
            signalBitNb       => signalBitNb,
            coeffBitNb        => coeffBitNb,
            oversamplingBitNb => sampleCountBitNb
        )
        PORT MAP (
            clock          => clock,
            reset          => reset,
            restartPolynom => newPolynom,
            d              => d,
            sampleOut      => sineSigned,
            c              => c,
            b              => b,
            a              => a,
            en             => logic1
        );
    I_coeffs : interpolatorCoefficients
        GENERIC MAP (
            bitNb      => signalBitNb,
            coeffBitNb => coeffBitNb
        )
        PORT MAP (
            sample1           => sample1,
            sample2           => sample2,
            sample3           => sample3,
            sample4           => sample4,
            a                 => a,
            b                 => b,
            c                 => c,
            d                 => d,
            interpolateLinear => logic0
        );
    I_shReg : interpolatorShiftRegister
        GENERIC MAP (
            signalBitNb => signalBitNb
        )
        PORT MAP (
            clock        => clock,
            reset        => reset,
            shiftSamples => newPolynom,
            sampleIn     => sineSamples,
            sample1      => sample1,
            sample2      => sample2,
            sample3      => sample3,
            sample4      => sample4
        );
    I_trig : interpolatorTrigger
        GENERIC MAP (
            counterBitNb => sampleCountBitNb
        )
        PORT MAP (
            triggerOut => newPolynom,
            clock      => clock,
            reset      => reset,
            en         => logic1
        );
    I_unsigned : offsetToUnsigned
        GENERIC MAP (
            bitNb => signalBitNb
        )
        PORT MAP (
            unsignedOut => sine,
            signedIn    => sineSigned
        );
    I_size : resizer
        GENERIC MAP (
            inputBitNb  => phaseBitNb,
            outputBitNb => signalBitNb
        )
        PORT MAP (
            resizeOut => sawtooth_internal,
            resizeIn  => phase
        );
    I_sin : sineTable
        GENERIC MAP (
            inputBitNb        => phaseBitNb,
            outputBitNb       => signalBitNb,
            tableAddressBitNb => tableAddressBitNb
        )
        PORT MAP (
            sine  => sineSamples,
            phase => phase
        );
    I_saw : sawtoothGen
        GENERIC MAP (
            bitNb => phaseBitNb
        )
        PORT MAP (
            sawtooth => phase,
            clock    => clock,
            reset    => reset,
            step     => step,
            en       => logic1
        );
    I_square : sawtoothToSquare
        GENERIC MAP (
            bitNb => signalBitNb
        )
        PORT MAP (
            square   => square,
            sawtooth => sawtooth_internal
        );
    I_tri : sawtoothToTriangle
        GENERIC MAP (
            bitNb => signalBitNb
        )
        PORT MAP (
            triangle => triangle,
            sawtooth => sawtooth_internal
        );

    -- Implicit buffered output assignments
    sawtooth <= sawtooth_internal;

END struct;




--
-- VHDL Architecture Lissajous.lissajousGenerator.struct
--
-- Created:
--          by - zas.UNKNOWN (ZELL)
--          at - 14:14:35 02/20/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

LIBRARY DigitalToAnalogConverter;
LIBRARY SplineInterpolator;

ARCHITECTURE struct OF lissajousGenerator IS

    -- Architecture declarations

    -- Internal signal declarations
    SIGNAL sineX         : unsigned(signalBitNb-1 DOWNTO 0);
    SIGNAL sineY         : unsigned(signalBitNb-1 DOWNTO 0);
    SIGNAL squareY       : unsigned(signalBitNb-1 DOWNTO 0);
    SIGNAL stepXUnsigned : unsigned(phaseBitNb-1 DOWNTO 0);
    SIGNAL stepYUnsigned : unsigned(phaseBitNb-1 DOWNTO 0);


    -- Component Declarations
    COMPONENT DAC
    GENERIC (
        signalBitNb : positive := 16
    );
    PORT (
        serialOut  : OUT    std_ulogic ;
        parallelIn : IN     unsigned (signalBitNb-1 DOWNTO 0);
        clock      : IN     std_ulogic ;
        reset      : IN     std_ulogic 
    );
    END COMPONENT;
    COMPONENT sineGen
    GENERIC (
        signalBitNb : positive := 16;
        phaseBitNb  : positive := 10
    );
    PORT (
        clock    : IN     std_ulogic ;
        reset    : IN     std_ulogic ;
        step     : IN     unsigned (phaseBitNb-1 DOWNTO 0);
        sawtooth : OUT    unsigned (signalBitNb-1 DOWNTO 0);
        sine     : OUT    unsigned (signalBitNb-1 DOWNTO 0);
        square   : OUT    unsigned (signalBitNb-1 DOWNTO 0);
        triangle : OUT    unsigned (signalBitNb-1 DOWNTO 0)
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
    FOR ALL : DAC USE ENTITY DigitalToAnalogConverter.DAC;
    FOR ALL : sineGen USE ENTITY SplineInterpolator.sineGen;
    -- pragma synthesis_on


BEGIN
    -- Architecture concurrent statements
    -- HDL Embedded Text Block 1 eb1
    triggerOut <= squareY(squareY'high);

    -- HDL Embedded Text Block 2 eb2
    stepXUnsigned <= to_unsigned(stepX, stepXUnsigned'length);

    -- HDL Embedded Text Block 3 eb3
    stepYUnsigned <= to_unsigned(stepY, stepYUnsigned'length);


    -- Instance port mappings.
    I_dacX : DAC
        GENERIC MAP (
            signalBitNb => signalBitNb
        )
        PORT MAP (
            serialOut  => xOut,
            parallelIn => sineX,
            clock      => clock,
            reset      => reset
        );
    I_dacY : DAC
        GENERIC MAP (
            signalBitNb => signalBitNb
        )
        PORT MAP (
            serialOut  => yOut,
            parallelIn => sineY,
            clock      => clock,
            reset      => reset
        );
    I_sinX : sineGen
        GENERIC MAP (
            signalBitNb => signalBitNb,
            phaseBitNb  => phaseBitNb
        )
        PORT MAP (
            clock    => clock,
            reset    => reset,
            step     => stepXUnsigned,
            sawtooth => OPEN,
            sine     => sineX,
            square   => OPEN,
            triangle => OPEN
        );
    I_sinY : sineGen
        GENERIC MAP (
            signalBitNb => signalBitNb,
            phaseBitNb  => phaseBitNb
        )
        PORT MAP (
            clock    => clock,
            reset    => reset,
            step     => stepYUnsigned,
            sawtooth => OPEN,
            sine     => sineY,
            square   => squareY,
            triangle => OPEN
        );

END struct;




-- VHDL Entity WaveformGenerator.lowpass.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 08:02:49 03/11/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY lowpass IS
    GENERIC( 
        signalBitNb : positive := 16;
        shiftBitNb  : positive := 12
    );
    PORT( 
        lowpassOut : OUT    unsigned (signalBitNb-1 DOWNTO 0);
        clock      : IN     std_ulogic;
        reset      : IN     std_ulogic;
        lowpassIn  : IN     unsigned (signalBitNb-1 DOWNTO 0)
    );

-- Declarations

END lowpass ;





ARCHITECTURE studentVersion OF lowpass IS
  signal acc : unsigned (lowpassIn'high + shiftBitNb downto 0);
BEGIN
  lowp: process(reset, clock)
  begin
  if reset = '1' then
    acc <= (others => '0');
  elsif rising_edge(clock) then
    acc <= acc + lowpassIn  - shift_right(acc, shiftBitNb);
  end if;
  end process lowp;
    lowpassOut <= resize(shift_right(acc,shiftBitNb),lowpassOut'length);
END ARCHITECTURE studentVersion;



-- VHDL Entity Lissajous_test.lissajousGenerator_tester.interface
--
-- Created:
--          by - marcelo.kaihara.UNKNOWN (WE6899)
--          at - 14:03:39 02/26/2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.ALL;

ENTITY lissajousGenerator_tester IS
    GENERIC( 
        signalBitNb : positive := 16
    );
    PORT( 
        triggerOut : IN     std_ulogic;
        xLowapss   : IN     unsigned (signalBitNb-1 DOWNTO 0);
        xSerial    : IN     std_ulogic;
        yLowpass   : IN     unsigned (signalBitNb-1 DOWNTO 0);
        ySerial    : IN     std_ulogic;
        clock      : OUT    std_ulogic;
        reset      : OUT    std_ulogic
    );

-- Declarations

END lissajousGenerator_tester ;





ARCHITECTURE test OF lissajousGenerator_tester IS

  constant clockFrequency: real := 66.0E6;
  constant clockPeriod: time := (1.0/clockFrequency) * 1 sec;
  signal sClock: std_uLogic := '1';

BEGIN
  ------------------------------------------------------------------------------
                                                              -- clock and reset
  sClock <= not sClock after clockPeriod/2;
  clock <= transport sClock after clockPeriod*9/10;
  reset <= '1', '0' after 2*clockPeriod;

END ARCHITECTURE test;




--
-- VHDL Architecture Lissajous_test.lissajousGenerator_test.struct
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:07:27 02/19/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.ALL;

LIBRARY Lissajous;
LIBRARY Lissajous_test;
LIBRARY WaveformGenerator;

ARCHITECTURE struct OF lissajousGenerator_test IS

    -- Architecture declarations
    constant signalBitNb: positive := 16;
    constant phaseBitNb: positive := 17;
    constant stepX: positive := 2;
    constant stepY: positive := 3;
    constant lowpassShiftBitNb: positive := 8;

    -- Internal signal declarations
    SIGNAL clock      : std_ulogic;
    SIGNAL reset      : std_ulogic;
    SIGNAL triggerOut : std_ulogic;
    SIGNAL xLowapss   : unsigned(signalBitNb-1 DOWNTO 0);
    SIGNAL xParallel  : unsigned(signalBitNb-1 DOWNTO 0);
    SIGNAL xSerial    : std_ulogic;
    SIGNAL yLowpass   : unsigned(signalBitNb-1 DOWNTO 0);
    SIGNAL yParallel  : unsigned(signalBitNb-1 DOWNTO 0);
    SIGNAL ySerial    : std_ulogic;


    -- Component Declarations
    COMPONENT lissajousGenerator
    GENERIC (
        signalBitNb : positive := 16;
        phaseBitNb  : positive := 16;
        stepX       : positive := 1;
        stepY       : positive := 1
    );
    PORT (
        clock      : IN     std_ulogic ;
        reset      : IN     std_ulogic ;
        triggerOut : OUT    std_ulogic ;
        xOut       : OUT    std_ulogic ;
        yOut       : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT lissajousGenerator_tester
    GENERIC (
        signalBitNb : positive := 16
    );
    PORT (
        triggerOut : IN     std_ulogic ;
        xLowapss   : IN     unsigned (signalBitNb-1 DOWNTO 0);
        xSerial    : IN     std_ulogic ;
        yLowpass   : IN     unsigned (signalBitNb-1 DOWNTO 0);
        ySerial    : IN     std_ulogic ;
        clock      : OUT    std_ulogic ;
        reset      : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT lowpass
    GENERIC (
        signalBitNb : positive := 16;
        shiftBitNb  : positive := 12
    );
    PORT (
        lowpassOut : OUT    unsigned (signalBitNb-1 DOWNTO 0);
        clock      : IN     std_ulogic ;
        reset      : IN     std_ulogic ;
        lowpassIn  : IN     unsigned (signalBitNb-1 DOWNTO 0)
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
    FOR ALL : lissajousGenerator USE ENTITY Lissajous.lissajousGenerator;
    FOR ALL : lissajousGenerator_tester USE ENTITY Lissajous_test.lissajousGenerator_tester;
    FOR ALL : lowpass USE ENTITY WaveformGenerator.lowpass;
    -- pragma synthesis_on


BEGIN
    -- Architecture concurrent statements
    -- HDL Embedded Text Block 1 eb1
    xParallel <= (others => xSerial);
    yParallel <= (others => ySerial);


    -- Instance port mappings.
    I_DUT : lissajousGenerator
        GENERIC MAP (
            signalBitNb => signalBitNb,
            phaseBitNb  => phaseBitNb,
            stepX       => stepX,
            stepY       => stepY
        )
        PORT MAP (
            clock      => clock,
            reset      => reset,
            triggerOut => triggerOut,
            xOut       => xSerial,
            yOut       => ySerial
        );
    I_tester : lissajousGenerator_tester
        GENERIC MAP (
            signalBitNb => signalBitNb
        )
        PORT MAP (
            triggerOut => triggerOut,
            xLowapss   => xLowapss,
            xSerial    => xSerial,
            yLowpass   => yLowpass,
            ySerial    => ySerial,
            clock      => clock,
            reset      => reset
        );
    I_filtX : lowpass
        GENERIC MAP (
            signalBitNb => signalBitNb,
            shiftBitNb  => lowpassShiftBitNb
        )
        PORT MAP (
            lowpassOut => xLowapss,
            clock      => clock,
            reset      => reset,
            lowpassIn  => xParallel
        );
    I_filty : lowpass
        GENERIC MAP (
            signalBitNb => signalBitNb,
            shiftBitNb  => lowpassShiftBitNb
        )
        PORT MAP (
            lowpassOut => yLowpass,
            clock      => clock,
            reset      => reset,
            lowpassIn  => yParallel
        );

END struct;




